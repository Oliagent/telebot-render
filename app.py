import os, requests
from flask import Flask, request
from openai import OpenAI

app = Flask(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "devsecret")
TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∏ ---
BUTTONS = {
    "üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": "research",
    "‚úçÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç": "content",
    "üé® –î–∏–∑–∞–π–Ω": "design",
    "üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥": "marketing",
    "üìÅ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": "management",
    "‚ùì –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã": "misc",
}

def build_keyboard(cols=2):
    keys = list(BUTTONS.keys())
    rows = [[{"text": t} for t in keys[i:i+cols]] for i in range(0, len(keys), cols)]
    return {"keyboard": rows, "resize_keyboard": True}

MAIN_KB = build_keyboard()

# --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–æ–≤ (–∫–∞–∫–æ–π —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω) ---
CHAT_STATE = {}

# --- OpenAI –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç None) ---
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def ai_generate(mode_title: str, task: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
    –ï—Å–ª–∏ –∫–ª—é—á OpenAI –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ—Ç–¥–∞—ë–º —à–∞–±–ª–æ–Ω.
    """
    if not oai:
        templates = {
            "‚úçÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç": f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ ¬´{task}¬ª:\n‚Äî –ó–∞—Ü–µ–ø–∫–∞ (1‚Äì2 —Ñ—Ä–∞–∑—ã)\n‚Äî 3 —Ç–µ–∑–∏—Å–∞/—Ñ–∞–∫—Ç–∞\n‚Äî –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.",
            "üé® –î–∏–∑–∞–π–Ω": f"–ë—Ä–∏—Ñ –ø–æ –∑–∞–¥–∞—á–µ ¬´{task}¬ª:\n–¶–µ–ª—å, —Å—Ç–∏–ª—å (–º–∏–Ω–∏–º–∞–ª–∏–∑–º/–Ω–µ–æ–Ω), —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã (3 —Å—Å—ã–ª–∫–∏), —Ñ–æ—Ä–º–∞—Ç—ã (–æ–±–ª–æ–∂–∫–∞/–ª–æ–≥–æ—Ç–∏–ø/—Å—Ç–æ—Ä–∏—Å).",
            "üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥": f"–ú–∏–Ω–∏-–ø–ª–∞–Ω –ø–æ ¬´{task}¬ª:\n–¶–ê, –æ—Ñ—Ñ–µ—Ä, –∫–∞–Ω–∞–ª—ã (IG/TG/Reels), –±—é–¥–∂–µ—Ç, KPI –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏.",
            "üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": f"–°–∫–µ–ª–µ—Ç —Ä–µ—Å—ë—Ä—á–∞ ¬´{task}¬ª:\n–ì–∏–ø–æ—Ç–µ–∑—ã, 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤.",
            "üìÅ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": f"–ß–µ–∫-–ª–∏—Å—Ç:\n‚Äî –†–µ–∑—É–ª—å—Ç–∞—Ç: {task}\n‚Äî –î–µ–¥–ª–∞–π–Ω, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π\n‚Äî –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n‚Äî –†–∏—Å–∫–∏/–ø–ª–∞–Ω B.",
            "‚ùì –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã": f"–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ ¬´{task}¬ª:\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É —à–∞–≥–∏.",
        }
        return templates.get(mode_title, f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {task}")

    system = f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –†–µ–∂–∏–º: {mode_title}."
    prompt = f"–ó–∞–¥–∞—á–∞: {task}\n–°–¥–µ–ª–∞–π –ø–æ–ª–µ–∑–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–ø–∏—Å–∫–æ–º/–∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏)."
    try:
        resp = oai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": prompt},
            ],
            temperature=0.7,
            max_tokens=500,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ({e}). –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ ¬´{task}¬ª."

# --- –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_message(chat_id, text):
    requests.post(f"{TG_API}/sendMessage",
                  json={"chat_id": chat_id, "text": text, "reply_markup": MAIN_KB})

# --- –º–∞—Ä—à—Ä—É—Ç—ã ---
@app.get("/")
def index():
    return "ok"

@app.post(f"/webhook/{WEBHOOK_SECRET}")
def tg_webhook():
    update = request.get_json(silent=True) or {}
    msg = update.get("message") or update.get("edited_message")
    if not msg:
        return "ok"

    chat_id = msg["chat"]["id"]
    text = msg.get("text") or ""

    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    if text.lower() in ("/start", "start"):
        CHAT_STATE[chat_id] = None
        send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá")
        return "ok"

    # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º)
    if text in BUTTONS:
        CHAT_STATE[chat_id] = text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏—Ç—É–ª –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
        send_message(chat_id, f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {BUTTONS[text]}. –û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∑–∞–¥–∞—á—É.")
        return "ok"

    # –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if chat_id in CHAT_STATE and CHAT_STATE[chat_id]:
        mode_title = CHAT_STATE[chat_id]
        result = ai_generate(mode_title, text)
        send_message(chat_id, result)
        return "ok"

    # –§–æ–ª–ª–±—ç–∫
    send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–∂–∏–º–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.")
    return "ok"

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: –º–æ–∂–Ω–æ –¥–µ—Ä–Ω—É—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.get("/set_webhook")
def set_webhook():
    url = request.args.get("url")
    if not (url and BOT_TOKEN):
        return "need ?url=https://your-host"
    r = requests.get(f"{TG_API}/setWebhook",
                     params={"url": f"{url}/webhook/{WEBHOOK_SECRET}"})
    return r.json()

